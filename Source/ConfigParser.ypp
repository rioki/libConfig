/*
// libConfig
// Copyright 2010 Sean Farrell
//
// This file is part of libConfig.
// 
// libConfig is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// libConfig is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with libConfig. If not, see <http://www.gnu.org/licenses/>.
*/

%skeleton "lalr1.cc"
%defines
%define "parser_class_name" "ConfigParser"
%output="ConfigParser.cpp"

%locations
%error-verbose
%debug

%code requires 
{

class ConfigLexer;

#include <string>
#include <map>

#include "Config.h"

// PreprocParser.hpp(390) : warning C4512: 'yy::PreprocParser' : assignment operator could not be generated
#pragma warning (disable: 4512)

}

%parse-param {ConfigLexer& lex}
%parse-param {std::ostream& err}
%parse-param {config::Config& config}
%parse-param {std::string filename}
%lex-param   {PreprocLexer& lex}

%initial-action
{
    // Initialize the initial location.
    @$.begin.line = @$.end.line = 1;
    @$.begin.filename = @$.end.filename = &filename;
};


// Symbols.
%union
{    
    std::string* string;
    config::Value* value;
    std::pair<std::string*, config::Value*>* key_value_pair;
    std::map<std::string*, config::Value*>* value_map;
}

%token          END 0               "end of file"
%token <string> IDENTIFIER          "identifier"
%token <value>  BOOLEAN             "boolean contant"
%token <value>  INTEGER             "integer constant"
%token <value>  FLOAT               "float constant"
%token <value>  STRING              "string constant"

%token          LEFT_SQUARE_BRAKET  "["
%token          RIGHT_SQUARE_BRAKET "]"
%token          EQUAL               "="

%type <string>          section_head
%type <value>           literal_value
%type <key_value_pair>  value    
%type <value_map>       values

%{
int yylex(yy::ConfigParser::semantic_type* yylval, yy::ConfigParser::location_type* yylloc, ConfigLexer& lex);

#include "ConfigLexer.h"
%}

/* 
%destructor { delete $$; } <string>
%destructor { delete $$; } <value>
%destructor { delete $$->first; delete $$->second; delete $$; } <key_value_pair>
*/

%%

file:
    sections;
    
sections:
    /* eps */ |
    sections section;    

section:
    section_head values
    {
        std::map<std::string*, config::Value*>::iterator iter = $2->begin();
        while (iter != $2->end())
        {
            config.set_value(*$1, *iter->first, *iter->second);
            iter++;
        }
        // free mem for $1 and $2
    };
    
section_head:
    "[" IDENTIFIER "]"
    {
        $$ = $2;
    };

values:
    /* eps */
    {
        $$ = new std::map<std::string*, config::Value*>;        
    } |
    values value
    {
        $$ = $1;
        $$->insert(*$2);
    };

value:
    IDENTIFIER "=" literal_value
    {
        $$ = new std::pair<std::string*, config::Value*>($1, $3);
    };

literal_value:
    BOOLEAN |
    INTEGER |
    FLOAT |
    STRING;    

%%

#include <iostream>

#include "ConfigLexer.h"

//-----------------------------------------------------------------------------
void yy::ConfigParser::error(const location_type& l, const std::string& m)
{    
    err << *l.begin.filename << "(" << l.begin.line << "): " << m << std::endl;
}

//-----------------------------------------------------------------------------
int yylex(yy::ConfigParser::semantic_type* yylval, yy::ConfigParser::location_type* yylloc, ConfigLexer& lex)
{
    return lex.yylex(yylval, yylloc);
}
